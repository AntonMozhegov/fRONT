export const lecture_1 = `
<h1>Развитие фронтенд-фреймворков: от jQuery до современных решений для одностраничных приложений</h1>
<p>Что такое фронтенд-разработка?</p>
<p>Фронтенд-разработка представляет собой область веб-разработки, ориентированную на создание клиентской части веб-приложений — части, с которой пользователь взаимодействует непосредственно через веб-браузер. Основной задачей фронтенд-разработчика является проектирование удобного, интуитивно понятного и визуально привлекательного интерфейса. Для достижения этих целей активно применяются технологии <strong>HTML</strong> (язык разметки для создания структуры веб-страниц), <strong>CSS</strong> (язык стилей, отвечающий за визуальное оформление и адаптивность) и <strong>JavaScript</strong> (язык программирования, обеспечивающий динамическое поведение страниц и интерактивность).</p>
<p>Фронтенд-разработка выходит за пределы чисто визуального оформления. Она включает в себя такие задачи, как оптимизация скорости загрузки страниц, создание адаптивных и отзывчивых дизайнов, а также интеграцию с серверными компонентами через API. Это позволяет создать веб-приложение, которое корректно функционирует на различных устройствах и разрешениях экрана.</p>
<p>С момента своего зарождения фронтенд-разработка прошла значительный путь, начиная от статических HTML-страниц (содержащих лишь текст и гиперссылки) и заканчивая сложными одностраничными приложениями (SPA, от англ. Single Page Application). В отличие от традиционных многопстраничных приложений, в которых для каждого перехода между страницами требуется новая загрузка, SPA позволяет загружать HTML, CSS и JavaScript только один раз, а дальнейшие изменения интерфейса происходят динамически, без необходимости перезагрузки страницы. Это значительно повышает отзывчивость приложения и улучшает взаимодействие с пользователем.</p>
<p>Технологии, такие как <strong>React</strong>, <strong>Angular</strong> и <strong>Vue.js</strong>, широко используются для разработки SPA, поскольку они предоставляют необходимые инструменты для управления состоянием приложения, маршрутизации и взаимодействия с сервером. Эти фреймворки и библиотеки позволяют разработчикам строить сложные, многофункциональные интерфейсы, минимизируя при этом необходимость ручной работы с DOM и упрощая процесс разработки с помощью компонентного подхода.</p>

<h2>Статические страницы и серверный рендеринг</h2>
<p>Статические страницы и серверный рендеринг (SSR) являются двумя ключевыми концепциями в веб-разработке, каждая из которых имеет свои особенности, преимущества и области применения.</p>
<ul>
  <li><strong>Статические страницы</strong> — это HTML-документы, которые создаются заранее и доступны пользователям без необходимости взаимодействовать с сервером во время их загрузки.</li>
  <li><strong>Серверный рендеринг</strong> — динамическое создание HTML-кода на сервере при каждом запросе пользователя.</li>
  <li><strong>Гибридные подходы</strong> — такие как статическая генерация сайтов (SSG), когда страницы генерируются заранее, но можно строить динамические компоненты с помощью JavaScript.</li>
</ul>

<p>Таким образом, выбор между статическими страницами и серверным рендерингом зависит от особенностей проекта, частоты обновлений контента и требований пользователей. Важно учитывать не только технические, но и социально-психологические аспекты, такие как удовлетворённость конечных пользователей.</p>

<h4>jQuery и революция DOM-манипуляций</h4>
<p>Для начала разберем понятие DOM (Document Object Model). DOM — это стандартизованное представление структуры HTML- или XML-документа в виде иерархического дерева объектов, где каждый узел соответствует элементу, атрибуту или текстовому содержимому. После загрузки веб-страницы браузер формирует DOM-модель, которая служит интерфейсом между структурой документа и скриптами, позволяя программно управлять содержимым, структурой и стилями страницы.</p>

<h3>Преимущества jQuery</h3>
<ul>
  <li>Упрощение синтаксиса для манипуляций с DOM.</li>
  <li>Кроссбраузерность: устранение различий между браузерами в реализации JavaScript.</li>
  <li>Поддержка асинхронных запросов через AJAX для обновления данных без перезагрузки страницы.</li>
</ul>

<p>С развитием технологий jQuery стало терять популярность. Появление более современных фреймворков, таких как <strong>React</strong>, <strong>Angular</strong> и <strong>Vue.js</strong>, предложивших декларативный подход и реактивность, а также улучшенные возможности для работы с состоянием и маршрутизацией, привело к тому, что jQuery стало менее подходящим для крупных проектов. Тем не менее, эта библиотека оставила неизгладимый след в истории веб-разработки, став основой для более современных решений и продолжая использоваться для небольших проектов.</p>

<h3>Появление MVC-фреймворков</h3>
<p>С ростом сложности веб-приложений стало очевидно, что использование jQuery и простых манипуляций с DOM уже не справляется с масштабированием и управлением сложными интерфейсами. Чтобы решить эти проблемы, разработчики начали искать способы улучшить организацию кода и управление данными, что привело к появлению архитектурных паттернов и фреймворков. Одним из таких популярных паттернов стал <strong>MVC</strong> (Model-View-Controller).</p>
<ul>
  <li><strong>Model (Модель)</strong> — часть, которая отвечает за данные приложения и логику их обработки.</li>
  <li><strong>View (Представление)</strong> — часть, которая отображает данные пользователю.</li>
  <li><strong>Controller (Контроллер)</strong> — часть, которая управляет взаимодействием между моделью и представлением, обрабатывает пользовательские запросы.</li>
</ul>

<p>Это разделение позволило улучшить структуру кода и сделать его более читаемым и поддерживаемым. Первые фреймворки фронтенд-разработки, такие как <strong>Backbone.js</strong>, <strong>AngularJS</strong> и <strong>Ember.js</strong>, были созданы на основе этого паттерна и обеспечили более организованную и масштабируемую разработку веб-приложений.</p>

<h3>Backbone.js — первый шаг к структуре</h3>
<ul>
  <li><strong>Модели (Models)</strong> — для хранения данных.</li>
  <li><strong>Представления (Views)</strong> — для отображения этих данных.</li>
  <li><strong>Маршрутизатор (Router)</strong> — для управления переходами между различными частями приложения.</li>
</ul>

<p>Этот фреймворк позволил разработчикам организовывать код более структурированно, избавляя его от "спагетти-кода", который возникал при использовании только jQuery для манипуляций с DOM.</p>

<h3>AngularJS — первая массовая попытка полного фреймворка</h3>
<p>В 2010 году компания Google представила <strong>AngularJS</strong> — мощный фреймворк, который стал настоящим прорывом. Он внедрил несколько новых концепций, которые изменили подход к разработке динамических веб-приложений. Одной из ключевых особенностей AngularJS стало двустороннее связывание данных (<strong>two-way data binding</strong>).</p>
<ul>
  <li>Автоматическое обновление интерфейса при изменении данных.</li>
  <li>Упрощение кода с помощью директив.</li>
  <li>Механизм <strong>Dependency Injection</strong> для улучшенной модульности.</li>
</ul>

<h3>Контрольные вопросы:</h3>
<ol>
  <li>Что такое фронтенд-разработка и какие основные задачи она решает?</li>
  <li>Что такое SPA (single-page application) и как этот подход изменяет взаимодействие с пользователем по сравнению с традиционными многостраничными приложениями?</li>
  <li>Какие технологии используются в фронтенд-разработке для создания веб-приложений?</li>
  <li>В чем разница между статическими страницами и серверным рендерингом (SSR)? Какие плюсы и минусы у каждой из этих технологий?</li>
  <li>Какой подход используется в статической генерации сайтов (SSG) и как он сочетает преимущества статических страниц и серверного рендеринга?</li>
  <li>Как jQuery изменил подход к манипуляции с DOM в веб-разработке и какие преимущества он принес разработчикам?</li>
  <li>Какие основные проблемы возникали при использовании jQuery в масштабных проектах?</li>
  <li>Что такое архитектурный паттерн MVC и как он был использован в первых фреймворках фронтенд-разработки, таких как Backbone.js?</li>
  <li>Какие основные особенности AngularJS сделали его популярным, и как двустороннее связывание данных помогает упростить разработку?</li>
  <li>Какие проблемы с производительностью были у AngularJS и как их решали новые фреймворки, такие как React и Vue.js?</li>
</ol>
`